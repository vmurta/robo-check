/**
Function signatures and support for the narrow-phase kernel
*/

#pragma once

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include "../Utils_rai.h"

// struct Vector3f {
//   float x, y, z;
//   __device__ __host__ Vector3f() : x(0), y(0), z(0) {}
//   __device__ __host__ Vector3f(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}
// };

// struct Triangle {
//   int v1, v2, v3;
// };


// This assumes all data is already copied to the device and pre-allocated
// It's basically just a wrapper for the CUDA kernel
void narrowPhase(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);

// CPU baseline version
// Requires all data to be on the host and pre-allocated
void narrowPhaseBaseline(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);

// the kernel itself
__global__ void narrowPhaseKernel(int num_confs, int num_rob_trs, int num_rob_pts,
        int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
        const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
        bool *valid_conf);