/**
Function signatures and support for the narrow-phase kernel
*/

#pragma once

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include "../Utils_rai.h"


// This assumes all data is already copied to the device and pre-allocated
// It's basically just a wrapper for the CUDA kernel
void narrowPhase(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);
void narrowPhase_sep(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const float *rob_pts_x, const float *rob_pts_y, const float *rob_pts_z, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);
void narrowPhase_unopt(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);

// CPU baseline version
// Requires all data to be on the host and pre-allocated
void narrowPhaseBaseline(int num_confs, int num_rob_trs, int num_rob_pts,
    int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
    const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
    bool *valid_conf);

// the kernel itself
__global__ void narrowPhaseKernel(int num_confs, int num_rob_trs, int num_rob_pts,
        int num_obs_trs, int num_obs_pts, const Triangle *rob_trs,
        const Vector3f *rob_pts, const Triangle *obs_trs, const Vector3f *obs_pts,
        bool *valid_conf);